{"version":3,"sources":["ColorPalete.js","TrackList.js","App.js","serviceWorker.js","index.js"],"names":["c","React","Component","TrackList","props","trackHeader","y","tracks","forEach","element","push","label","trackName","dataField","cars","c1","tk","trackAlloted","_id","xs","key","grouped","reduce","rv","x","z","Object","keys","val","i","carName","console","log","dataSource","Smart","DataAdapter","dataFields","columns","App","state","currentTrack","updateCurrentTrack","bind","axios","get","then","Response","setState","data","catch","error","item","this","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sUAMIA,G,MAAI,I,GACkBC,IAAMC,U,aCuHfC,EA1HC,SAACC,GAClB,IAAMC,EAAa,GACbC,EAAI,GAMVF,EAAMG,OAAOC,SAAQ,SAAAC,GAEpBJ,EAAYK,KAAK,CAACC,MAAOF,EAAQG,UACjCC,UAAWJ,EAAQG,YACnBN,EAAEI,KAAF,UAAUD,EAAQG,UAAlB,gBA0CDR,EAAMU,KAAKN,SAAQ,SAAAO,GAIlBX,EAAMG,OAAOC,SAAQ,SAAAQ,GACjBD,EAAGE,eAAiBD,EAAGE,MACzBH,EAAGH,UAAYI,EAAGJ,iBAOrB,IAAuBO,EAAIC,EAMnBC,GANeF,EAMGf,EAAMU,KANLM,EAMW,YAL9BD,EAAGG,QAAO,SAASC,EAAIC,GAE5B,OADCD,EAAGC,EAAEJ,IAAQG,EAAGC,EAAEJ,KAAS,IAAIV,KAAKc,GAC9BD,IACN,KAGIE,EAAI,GACXC,OAAOC,KAAKN,GAASb,SAAQ,SAACY,GAC5BC,EAAQD,GAAKZ,SAAQ,SAACoB,EAAKC,GAEtBJ,EAAEI,KAGLJ,EAAEI,GAAK,IAFPJ,EAAEI,GAAGT,GAAOQ,EAAIE,cAQnBC,QAAQC,IAAI,KACZD,QAAQC,IAAIP,GACd,IAAMQ,EAAa,IAAIC,IAAMC,YAAY,CAGxCF,WAAYR,EACXW,WAAW9B,IAGb,OACE,6BASDyB,QAAQC,IAAIX,GAGX,kBAAC,IAAD,CACEY,WAAaA,EAEbI,QAAWhC,MCvDDiC,E,kDApDb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IACDmC,MAAQ,CACXhC,OAAQ,GACRO,KAAK,GACL0B,aAAc,IAGhB,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBART,E,gEAWE,IAAD,OAIlBC,IAAMC,IAHM,gCAITC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZxC,OAAQuC,EAASE,UAGpBC,OAAM,SAACC,GACNnB,QAAQC,IAAIkB,MAGdP,IAAMC,IAZQ,8BAabC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZjC,KAAMgC,EAASE,UAGlBC,OAAM,SAACC,GACNnB,QAAQC,IAAIkB,Q,yCAICC,GACjBC,KAAKL,SAAS,CACZP,aAAcW,M,+BAKlB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAW9C,OAAQ6C,KAAKb,MAAMhC,OAAQO,KAAMsC,KAAKb,MAAMzB,Y,GA/C3Cb,IAAMC,WCKJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMmB,c","file":"static/js/main.6a10d757.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ColorPicker } from 'smart-webcomponents-react/colorpicker';\r\nimport { Button, RepeatButton, ToggleButton, PowerButton } from 'smart-webcomponents-react/button';\r\nimport './button.css'\r\n\r\nvar c = \"\";\r\nclass ColorPalete extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            color:\"red\"\r\n        }\r\n\r\n    }\r\n\r\n\thandleChange(event) {\r\n        console.log(\"New Color: \" + event.detail.value)\r\n        c = event.detail.value;\r\n        \r\n        console.log(\"c: \"  + c);\r\n        return c;\r\n    }\r\n    \r\n    changeColor = () => {\r\n        this.setState({color: c});\r\n      }\r\n\r\n\tcomponentDidMount() {\r\n        \r\n\t}\r\n\r\n\trender() {\r\n        let myColor = this.state.color;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"demo-description\">\r\n\t\t\t\t\t<h1>Color Legend</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ColorPicker onChange={this.handleChange}  enableCustomColors></ColorPicker>\r\n                \r\n                {console.log(\"c in form: \" + myColor)}\r\n                <form>\r\n                    <label style={{backgroundColor:myColor}}>\r\n                        {myColor}\r\n                    </label>\r\n                    < button\r\n                        type = \"button\" onClick = {this.changeColor} style={{color:\"blue\"}}>\r\n                        BLUE  - INSPECTION \r\n\r\n                    </button>\r\n\r\n                    <div class=\"button-demo button-n-45\">\r\n\t\t\t        <div class=\"demo-buttons-group\">\r\n\t\t\t            <div class=\"container\">\r\n\t\t\t                <div class=\"center\">\r\n\t\t\t                    <Button  class=\"btn\">\r\n\t\t\t                        <svg width=\"180px\" height=\"60px\" viewBox=\"0 0 180 60\">\r\n\t\t\t                            <polyline points=\"179,1 179,59 1,59 1,1 179,1\" class=\"bg-line\" />\r\n\t\t\t                            <polyline points=\"179,1 179,59 1,59 1,1 179,1\" class=\"hl-line\" />\r\n\t\t\t                        </svg> <span>HOVER ME</span>\r\n\t\t\t                    </Button>\r\n\t\t\t                </div>\r\n\t\t\t            </div>\r\n\t\t\t        </div>\r\n\t\t\t    </div>\r\n  \r\n                </form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ColorPalete;\r\n","import React from 'react';\r\nimport 'smart-webcomponents-react/source/styles/smart.default.css';\r\nimport {Smart, Grid } from 'smart-webcomponents-react/grid';\r\n\r\nconst TrackList = (props) =>{\r\n\tconst trackHeader =[];\r\n\tconst y = [];\r\n\t//const z =[];\r\n\tconst t1 = [];\r\n\tconst k1 =[];\r\n\tvar count = 1;\r\n\t//columns header\r\n\tprops.tracks.forEach(element => {\r\n\t\t// z.push(element.trackName);\r\n\t\ttrackHeader.push({label: element.trackName,\r\n\t\tdataField: element.trackName});\r\n\t\ty.push(`${element.trackName}: string`);\r\n\t\t/* props.cars.forEach(c1 =>{\r\n\t\t\tif(element._id === c1.trackAlloted ){\r\n\t\t\t\tt1.push([element.trackName,c1.carName]); \r\n\t\t\t\tif(z[element.trackName] === t1[element.trackName,0] ){\r\n\t\t\t\t\tk1.push(c1.carName)\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\t\r\n\t  \r\n\t\t});  */\r\n\t\t\r\n\t\t\r\n\t});\r\n\t\r\n\t \r\n\t  //for(let i=0;){\r\n\t\t\t\r\n\t//}\r\n\t \r\n\r\n\t\r\n/* \tconst carData = () =>{\r\n\t\tprops.tracks.forEach(element => {\r\n\t\t\tz.push(element.trackName);\r\n\t\t   props.cars.forEach(c1 =>{\r\n\t\t\t   if(element._id === c1.trackAlloted ){\r\n\t\t\t\t   t1.push([element.trackName,c1.carName]); \r\n\t\t\t\t   if(z[element.trackName] === t1[element.trackName,0] ){\r\n\t\t\t\t\t  // data = k1.push(c1.carName)\r\n\t\t\t\t   } \r\n\t\t\t   }\r\n\t\t\t   \r\n\t\t \r\n\t\t   }); \r\n\t\t   \r\n\t\t   \r\n\t   });\r\n\r\n\t} */\r\n\r\n\t\r\n\tprops.cars.forEach(c1 =>{\r\n\t\t//if(element._id === c1.trackAlloted ){\r\n\t\t\t//y.push(c1.carName)  \r\n\t\t//}\r\n\t\tprops.tracks.forEach(tk =>{\r\n\t\t\tif(c1.trackAlloted === tk._id){\r\n\t\t\t\tc1.trackName = tk.trackName;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n  \r\n\t}); \r\n\t\r\n\tvar groupBy = function(xs, key) {\r\n\t\treturn xs.reduce(function(rv, x) {\r\n\t\t  (rv[x[key]] = rv[x[key]] || []).push(x);\r\n\t\t  return rv;\r\n\t\t}, {});\r\n\t  };\r\n\t  const grouped = groupBy(props.cars, 'trackName');\r\n\t  const z = []; \r\n\t Object.keys(grouped).forEach((key) => {\r\n\t\t  grouped[key].forEach((val, i) => {\r\n\t\t\t  //console.log(grouped[i]);\r\n\t\t\t  if (z[i])\r\n\t\t\t\t  z[i][key] = val.carName;\r\n\t\t\t  else {\r\n\t\t\t\t  z[i] = {};\r\n\t\t\t\t  z[i][key] = val.carName;\r\n\t\t\t  }\r\n\t\t  });\r\n\t  }); \r\n\r\n\t  console.log(\"z\");\r\n\t  console.log(z);\r\n\tconst dataSource = new Smart.DataAdapter({\r\n\t\t/* dataSource:{'trackName': props.carName},\r\n\t\tdataFields:['trackName:string']  */\r\n\t\tdataSource: z ,\r\n\t\t\tdataFields:y\r\n\t }); \r\n\r\n\treturn(\r\n\t  <div>\r\n\t\t\r\n\t\t  {/*<a href=\"#!\" key={item._id} onClick = {props.updateCurrentTrack.bind(this,item)}>\r\n\t\t\t{item.trackNumber} {item.trackName}\r\n\t\t  </a>*/\r\n\t\t    /* <div key={item._id}>\r\n\t\t\t    {item.trackName} {item.trackCapacity}\r\n\t</div> */}\r\n\t\r\n\t{console.log(grouped)}\r\n\t\r\n\r\n\t\t\t<Grid \r\n\t\t\t\t\tdataSource={ dataSource}\r\n\r\n\t\t\t\t\tcolumns = {trackHeader}\r\n\t\t\t\t>\r\n\t\t\t\t</Grid>\r\n\t\t\t\r\n\t\t\r\n        \r\n\t  </div>\r\n\t);\r\n  }\r\n\r\n  export default TrackList;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport ColorPalete from './ColorPalete';\n\nimport  TrackList from './TrackList';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tracks: [],\n      cars:[],\n      currentTrack: {},\n    }\n\n    this.updateCurrentTrack = this.updateCurrentTrack.bind(this);\n  }\n\n  componentDidMount() {\n    const url = 'http://localhost:4000/tracks';\n    const carsUrl = 'http://localhost:4000/cars';\n\n    axios.get(url)\n      .then((Response) => {\n        this.setState({\n          tracks: Response.data\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n      axios.get(carsUrl)\n      .then((Response) => {\n        this.setState({\n          cars: Response.data\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  updateCurrentTrack(item) {\n    this.setState({\n      currentTrack: item,\n    })\n  }\n  render(){\n\n  return (\n    <div className=\"App\">\n      <TrackList tracks={this.state.tracks} cars={this.state.cars}/>\n     {/*<ColorPalete/>*/}\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}